version: '3'
services:
  app:
    build: .
    environment:
      - REDIS_HOST=redis
    hostname: resourcestore
    networks:
      redis-net:
      resourcestore-net:
        aliases:
          - resourcestore
    depends_on:
      - redis

  redis:
    image: redis:4.0.5-alpine
    command: ["redis-server", "--appendonly", "yes"]
    hostname: redis
    networks:
      - redis-net
    volumes:
      - redis-data:/data

  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_TRUSTED_IPS: 0.0.0.0/0,::/0
    networks:
      - kong-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 2s
  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_TRUSTED_IPS: 0.0.0.0/0,::/0
    networks:
      - kong-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 2s
  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-root}"
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: kong-db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
    hostname: kong
    networks:
      resourcestore-net:
      kong-net:
        aliases:
          - kong
    ports:
      - "80:8000/tcp"
      - "443:8443/tcp"
    expose:
      - "8001"
    depends_on:
      - kong-db
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
  kong-certbot-agent:
    image: phpdockerio/kong-certbot-agent:latest
    environment:
      - KONG_ENDPOINT=http://kong:8001
      - EMAIL=FIXME
      - DOMAINS=FIXME
    depends_on:
      - kong
    hostname: kong-certbot-agent
    expose:
      - "80"
      - "443"
    networks:
      kong-net:
        aliases:
          - kong-certbot-agent
  kong-db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
    hostname: kong-db
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 5
    stdin_open: true
    tty: true
    networks:
      kong-net:
        aliases:
          - kong-db
    volumes:
      - kong_data:/var/lib/postgresql/data
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s

networks:
  redis-net:
  resourcestore-net:
  kong-net:

volumes:
  redis-data:
  kong_data: {}
